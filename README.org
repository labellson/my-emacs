#+TITLE: My Emacs Config
#+AUTHOR: Daniel Laguna
#+EMAIL: labellson@gmail.com

* Introduction
The idea of generating an emacs config file using =org-mode= is taken from [[https://youtu.be/SzA2YODtgK4][Harry Schwartz's talk about org-mode]]. When Emacs starts, all the elisp code blocks from this file are parsed and used to generate the config. This is done through [[http://orgmode.org/worg/org-contrib/babel/][org-babel]]. =Babel= is Org-mode's ability to execute source code within =org-mode= documents.

To use this config file, you need to evaluate this file on startup. This can be done writing this line ~(org-babel-load-file "~/.my-emacs/README.org")~ into your [[file:init.el][init.el]].

*NOTE*: This file assumes that your =org-mode= config file is located into =~/.my-emacs/README.org=.

* Basic Emacs Setup
** My information
Relevant personal information that Emacs needs.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Daniel Laguna"
    user-mail-address "labellson@gmail.com"
    calendar-latitude 40.33
    calendar-longitude -3.76
    calendar-location-name "Madrid, Spain")
#+END_SRC

** Adding MELPA 
MELPA is the main package repository for Emacs. There are more repositories and you are able to add more than one. *But make sure you are using HTTPS!!*.

#+BEGIN_SRC emacs-lisp
;; Set up the package manager and repositories
(require 'package)

(add-to-list 'package-archives '("MELPA" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))

(setq package-enable-at-startup nil)
(package-initialize)
#+END_SRC

** TAB
=<TAB>= key run indentation in most of the major mode. Sometimes, I want to =<TAB>= behaves as inserting a tab character. I can do this typing =C-q-<TAB>= but I don't like the default widht. So...

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
#+END_SRC

* Emacs GUI
** =delight= to manage mode names in the mode-line
This package let us rename or hide mode names in the mode-line. It's fully compatible with =use-package=.

#+BEGIN_SRC emacs-lisp
(use-package delight
  :ensure t
  :demand t)
#+END_SRC

Emacs provides some minor modes that I want to hide as well.

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :delight
  (auto-revert-mode)
  (visual-line-mode))
#+END_SRC

* Programming Modes
** =company=
[[http://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates. 

Add =company-tng-frontend= if you like YCM Vim completion :P

#+BEGIN_SRC emacs-lisp
(use-package company
  :delight
  :ensure t
  :config
    (setq company-tooltip-align-annotations t)
    (eval-after-load 'company
      '(progn
        (add-hook 'prog-mode-hook 'company-mode)
        (add-to-list 'company-frontends 'company-tng-frontend)
        (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
        (define-key company-active-map [tab] 'company-complete-common-or-cycle)
        (define-key company-active-map (kbd "S-TAB") 'company-select-previous)
        (define-key company-active-map (kbd "<backtab>") 'company-select-previous)
        
        (define-key company-mode-map (kbd "C-<SPC>") 'company-complete))))
#+END_SRC

With =company-flx= we add fuzzy matching to =company=. But it seems only work with =company-capf= backend.

#+BEGIN_SRC emacs-lisp
(use-package company-flx
  :delight
  :ensure t
  :config
    (eval-after-load 'company
      (company-flx-mode +1)))
#+END_SRC
   
** Python
In order to use ipython as default interpreter set these lines below.

#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "ipython"
       python-shell-interpreter-args "--simple-prompt -i")
#+END_SRC

I've set a global =tab-width= in basic emacs setup. But it seems not working in =python-mode=.

#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook
      (lambda ()
        (setq tab-width 4)))
#+END_SRC

*** =anaconda-mode=
[[https://github.com/proofit404/anaconda-mode][Anaconda]] provides context code completion, jump to definitions, find references and documentation view through =eldoc= for python mode. Its usage is very simple and it integrates with =company-mode=.

#+BEGIN_SRC emacs-lisp
(use-package anaconda-mode
  :ensure t
  :delight
  :config
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
#+END_SRC

**** Default Keybinding
| Keybinding | Description                    |
|------------+--------------------------------|
| C-M-i      | anaconda-mode-complete         |
| M-.        | anaconda-mode-find-definitions |
| M-,        | anaconda-mode-find-assignments |
| M-r        | anaconda-mode-find-references  |
| M-*        | anaconda-mode-go-back          |
| M-?        | anaconda-mode-show-doc         |
   
*** =company-anaconda=
This is a backend for =company-mode= that works with =anaconda-mode=. Necessary if you want autocompletion.

#+BEGIN_SRC emacs-lisp
(use-package company-anaconda
  :ensure t
  :delight
  :config
    (eval-after-load "company"
      '(add-to-list 'company-backends '(company-anaconda :with company-capf))))
#+END_SRC

* WIP
These source blocks needs to be documented.

#+BEGIN_SRC emacs-lisp


;; Install use-package if not installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))


;; Show Parenthesis Mode
(setq show-paren-delay 0)
(show-paren-mode 1)

;; Hide the toolbar and menubar
(tool-bar-mode -1)
(menu-bar-mode -1)

;; Don't create backups
(setq make-backup-files nil)

;; Disable scroll bar
(scroll-bar-mode -1)

;; Load packages
(use-package evil
  :ensure t
  :config
  (evil-mode 1)

  ;; Evil key bindings
  (define-key evil-motion-state-map "j" 'evil-next-visual-line)
  (define-key evil-motion-state-map "k" 'evil-previous-visual-line)

  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode)

    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "x" 'helm-M-x
      "<SPC>" 'evil-search-highlight-persist-remove-all))

  (use-package evil-search-highlight-persist
   :ensure t
   :config
   (global-evil-search-highlight-persist t)))

(use-package gruvbox-theme
  :ensure t)

; Smooth scrolling on file limits
(use-package smooth-scrolling
  :ensure t
  :config
  (smooth-scrolling-mode 1))

; SimpleClip Super+C Super+X Super+V
(use-package simpleclip
  :ensure t
  :config
  (simpleclip-mode 1))

(use-package fill-column-indicator
  :ensure t
  :config
  ;(fci-mode)           ;activate fill-column-indicator. use lambda hook
  (set-fill-column 80))

;; Wrap lines
(global-visual-line-mode 1)

;; Show margin line numbers
(use-package nlinum
  :ensure t
  :config

  ;(global-nlinum-mode t)

  (use-package nlinum-relative
    :ensure t
    :config
   ;; something else you want
    (nlinum-relative-setup-evil)
    (setq nlinum-relative-redisplay-delay 0)
    (add-hook 'prog-mode-hook 'nlinum-relative-mode)))

(use-package linum-off
  :ensure t
  ;(setq linum-disabled-modes-list â€˜(eshell-mode wl-summary-mode compilation-mode))
)

;; Zsh Tab completion for minibuffer
(use-package zlc
  :ensure t
  :config
  (zlc-mode t))

;; Spell checker
(when (executable-find "hunspell")
  (setq-default ispell-program-name "hunspell")
  (setq ispell-dictionary "es_ES")
  (setq ispell-really-hunspell t))

;; Word Count
(use-package wc-mode
  :ensure t
  :config)

;; org-mode

;; Folding character
(setq org-ellipsis " \u2935")

;; Prettify latex symbols
(setq-default org-pretty-entities t)

(use-package org-ref
  :ensure t
  :config

  (setq org-src-preserve-indentation t)

  (setq org-latex-default-packages-alist
	(-remove-item
	 '("" "hyperref" nil)
	 org-latex-default-packages-alist))

  (add-to-list 'org-latex-default-packages-alist '("" "natbib" "") t)
  (add-to-list 'org-latex-default-packages-alist
	       '("linktocpage,pdfstartview=FitH,colorlinks,linkcolor=black,anchorcolor=black,citecolor=black,filecolor=blue,menucolor=black,urlcolor=blue"
		 "hyperref" nil)
	       t)

  (progn
    (setq org-ref-bibliography-notes "~/Drive/org/bibliography/notes.org"
          org-ref-default-bibliography '("~/Drive/org/bibliography/main.bib")
          org-ref-pdf-directory "~/Drive/org/bibliography/pdfs"
          org-latex-pdf-process
          '("pdflatex -interaction nonstopmode -output-directory %o %f"
            "bibtex %b"
            "pdflatex -interaction nonstopmode -output-directory %o %f"
            "pdflatex -interaction nonstopmode -output-directory %o %f")))

  (setq bibtex-autokey-year-length 4
      bibtex-autokey-name-year-separator "-"
      bibtex-autokey-year-title-separator "-"
      bibtex-autokey-titleword-separator "-"
      bibtex-autokey-titlewords 2
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 5))

(use-package org-autolist
  :ensure t
  :config (add-hook 'org-mode-hook (lambda () (org-autolist-mode))))

;; Set the agenda files
(setq org-agenda-files (list "~/Drive/org/agenda.org"))

(use-package org-bullets
  :ensure t)
  ;:config
  ;(progn
  ;  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  ;  (setq org-bullets-bullet-list
  ;        '("\u25c9" "\u25ce" "\u25cb" "\u25cb" "\u25cb" "\u25cb"))))

;; Add these evil keybindings in Emacs mode
(evil-add-hjkl-bindings occur-mode-map 'emacs
  (kbd "/")       'evil-search-forward
  (kbd "n")       'evil-search-next
  (kbd "N")       'evil-search-previous
  (kbd "C-d")     'evil-scroll-down
  (kbd "C-u")     'evil-scroll-up
  (kbd "C-w C-w") 'other-window)

;; Keyboard maps
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#242424" "#e5786d" "#95e454" "#cae682" "#8ac6f2" "#333366" "#ccaa8f" "#f6f3e8"])
 '(custom-enabled-themes (quote (gruvbox-dark-hard)))
 '(custom-safe-themes
   (quote
    ("7f3ef7724515515443f961ef87fee655750512473b1f5bf890e2dc7e065f240c" "65d9573b64ec94844f95e6055fe7a82451215f551c45275ca5b78653d505bc42" "5a970147df34752ed45bfdf0729233abfc085d9673ae7e40210c5e2d8f624b08" "dc9a8d70c4f94a28aafc7833f8d05667601968e6c9bf998791c39fcb3e4679c9" "125fd2180e880802ae98b85f282b17f0aa8fa6cb9fc4f33d7fb19a38c40acef0" "2b6bd2ebad907ee42b3ffefa4831f348e3652ea8245570cdda67f0034f07db93" default)))
 '(package-selected-packages (quote (ox-latex-chinese zlc helm evil))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
 #+END_SRC

* PDF Tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :config

  (pdf-tools-install))

#+END_SRC
  
There's a conflict between =evil-mode= and =pdf-view-mode=. =evil= cause that pdf display keeps blinking. [[https://github.com/politza/pdf-tools/issues/201][xuhdev]] gives a solution to deal with this conflict.

#+BEGIN_SRC emacs-lisp
(evil-set-initial-state 'pdf-view-mode 'emacs)
(add-hook 'pdf-view-mode-hook
  (lambda ()
    (set (make-local-variable 'evil-emacs-state-cursor) (list nil))))
#+END_SRC
* Acknowledgments
- Thanks to Diego Vicente. He discovered me Emacs and =org-mode=. Also, many aspects of my Emacs file are inpired by his [[https://github.com/DiegoVicen/my-emacs][config file]].

* TODO-List
** TODO Format and document all the config file
** TODO Add different hooks for different mayor modes like org-mode
** TODO Configure Emacs as an IDE
*** TODO Python
*** TODO C++
*** TODO C#
